/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    behaviors {
        caps_word: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            continue-list = <>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
           &kp GRAVE  &kp N7     &kp N5         &kp N3           &kp N1            &kp N9       &kp N0          &kp N2     &kp N4                  &kp N6    &kp N8  &kp MINUS
&kp LWIN     &kp TAB   &kp Q      &kp W          &kp E            &kp R             &kp T        &kp Y           &kp U      &kp I                   &kp O     &kp P  &kp LBKT  &kp RBKT
          &kp ESCAPE   &kp A      &kp S          &kp D            &kp F             &kp G        &kp H           &kp J      &kp K                   &kp L  &kp SEMI  &kp SQT
          &kp LSHIFT   &kp Z      &kp X          &kp C            &kp V             &kp B        &kp N           &kp M  &kp COMMA                 &kp DOT  &kp FSLH  &kp RSHIFT
                              &kp ENTER  &kp BACKSPACE  &mo LWR  &kp LEFT_CONTROL    &kp LALT  &mo RSE  &kp SPACE  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
      &kp LA(LEFT)  &kp F7      &kp F5       &kp F3      &kp F1      &kp F9                   &kp F10   &kp F2     &kp F4    &kp F6   &kp F8           &kp LA(RIGHT)
&trans      &trans  &kp PG_UP   &kp PG_DN    &kp UP      &kp INS     &kp F11                  &kp F12   &kp LC(K)  &kp LC(UP)    &kp F9   &kp F10     &kp F11  &trans
            &trans  &kp HOME    &kp LEFT     &kp DOWN    &kp RIGHT   &kp END                &kp LA(UP)  &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)  &kp RPAR  &mt RCTRL MINUS
            &trans  &kp LC(Z)   &kp LS(DEL)  &kp LC(INS) &kp LS(INS) &kp DEL              &kp LA(DOWN)  &kp LC(PG_UP)     &kp LC(LS(LA(DOWN)))    &kp LC(PG_DN)    &kp LC(PG_DN)      &trans
                                &trans       &trans    &trans      &trans                   &trans    &trans  &mo ADJ    &trans
            >;
        };

        raise_layer {
            bindings = <
                 &trans           &trans     &trans     &trans     &trans        &trans          &trans    &trans     &trans     &trans           &trans           &trans
&trans       &kp KP_NUM     &kp KP_SLASH  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS    &kp C_VOL_UP  &kp HOME  &kp PSCRN  &kp PG_UP         &kp SLCK         &kp CAPS  &trans
        &mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS      &kp C_MUTE  &kp LEFT     &kp UP  &kp RIGHT          &kp INS  &mt RCTRL K_APP
                 &trans        &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3    &kp KP_DOT    &kp C_VOL_DN   &kp END   &kp DOWN  &kp PG_DN  &kp PAUSE_BREAK           &trans
                                             &trans     &trans     &trans     &lt 3 RET       &lt 3 ESC    &trans     &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
             &none         &none         &none         &none         &none         &none           &none         &none         &none         &none         &none        &none
&trans  &bootloader         &none         &none         &none         &none         &none           &none         &none         &none         &none         &none  &bootloader  &none
        &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0   &bt BT_CLR
        &sys_reset         &none         &none         &none         &none         &none           &none         &none         &none         &none         &none   &sys_reset
                                         &none        &trans         &none        &trans          &trans         &none        &trans         &none
            >;
        };
    };
};
