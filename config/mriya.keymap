/*
 * Copyright (c) 2023 serg3295
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define CS  4
#define SA  5
#define WIN 6

// Tiling window manager
#define WS_1 &kp LG(PG_UP)
#define WS_2 &kp LG(PG_DN)
#define N_W  &kp LG(LC(UP))
#define N_E  &kp LG(LC(LS(UP)))
#define S_W  &kp LG(LC(DOWN))
#define S_E  &kp LG(LC(LS(DOWN)))
#define WEST &kp LG(LC(LEFT))
#define EAST &kp LG(LC(RIGHT))
#define HIDE &kp LG(D)
#define MV_L &kp LG(LEFT)
#define MV_R &kp LG(RIGHT)
#define MV_U &kp LG(UP)
#define MV_D &kp LG(DOWN)

#define NEXT_ED &open_ed LC(PG_DN) PG_DN
#define PREV_ED &open_ed LC(PG_UP) PG_UP
#define WORKSPACE &ht3 LG(PG_DN) LG(SPACE)
#define NEXT_DIFF &ht3 LA(F3) LC(LA(RBKT))
#define PREV_DIFF &ht3 LS(LA(F3)) LC(LA(LBKT))
#define MOVE_ED_L &ht3 LC(LA(LEFT)) LC(LS(PG_UP))
#define MOVE_ED_R &ht3 LC(LA(RIGHT)) LC(LS(PG_DN))
#define PGUP_TAB  &ht3 LC(LS(TAB)) PG_UP
#define PGDN_TAB  &ht3 LC(TAB) PG_DN
#define COPY_LN   &ht3 LC(LA(FSLH)) LC(LA(LS(DOWN)))
#define F_BSPC    &ht3 LC(LS(BSPC)) LC(BSPC)
#define F_DEL     &ht3 LC(LS(DEL)) LC(DEL)
#define REFS      &ht3 LS(LA(F12)) LS(F12)
#define RET_CTL   &ht3 LC(RET) RET
#define GO_BACK   &ht3 LA(LEFT) LC(LA(MINUS))
#define GO_FWD    &ht3 LA(RIGHT) LC(LS(MINUS))
#define ALTS      &ht3 LALT RALT
#define W_CAPS  &ht_caps CAPS 0
#define INS_HOV &ht_ckck I INS

&lt {
  tapping_term_ms = <250>;
  quick_tap_ms = <250>;
};

&mt {
  tapping_term_ms = <250>;
  quick_tap_ms = <250>;
};

/ {
    macros {
      transform: transform_to {
        label = "TRANSFORM_TO";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings =
          <&macro_press &kp LCTRL &kp LSHIFT>,
          <&macro_tap &kp P>,
          <&macro_release &kp LSHIFT &kp LCTRL>,
          <&macro_tap &kp T &kp R &kp A &kp N &kp S &kp F &kp O &kp R &kp M>;
      };

      ck_ckey: ctrl_k_ctrl_keycode {
        label = "CTRL_K_CTRL_KEYCODE";
        compatible = "zmk,behavior-macro-one-param";
        #binding-cells = <1>;
        bindings =
          <&macro_press &kp LCTRL>,
          <&macro_tap &kp K>,
          <&macro_param_1to1>,
          <&macro_tap &kp MACRO_PLACEHOLDER>,
          <&macro_release &kp LCTRL>;
      };

      ck_key: ctrl_k_keycode {
        label = "CTRL_K_KEYCODE";
        compatible = "zmk,behavior-macro-one-param";
        #binding-cells = <1>;
        bindings =
          <&macro_press &kp LCTRL>,
          <&macro_tap &kp K>,
          <&macro_release &kp LCTRL>,
          <&macro_param_1to1>,
          <&macro_tap &kp MACRO_PLACEHOLDER>;
      };
    };

    behaviors {
    // hold-tap
      ht3: ht_300ms {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_300MS";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&kp>, <&kp>;
      };

      ht_caps: mod_caps {
        compatible = "zmk,behavior-hold-tap";
        label = "MOD_CAPS";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&kp>, <&caps_word>;
      };

      ht_ckck: ht_ctrl_k_ctrl_keycode {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_CTRL_K_CTRL_KEYCODE";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&ck_ckey>, <&kp>;
      };

      ht_ckk: ht_ctrl_k_keycode {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_CTRL_K_KEYCODE";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&ck_key>, <&kp>;
      };

      open_ed: ht_open_next_prev_editor {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_OPEN_NEXT_PREV_EDITOR";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&kp>, <&ck_ckey>;
      };

    // tap-dance
      fold: fold {
        compatible = "zmk,behavior-tap-dance";
        label = "FOLD";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ht_ckck N0 LC(LS(LBKT))>, <&ck_ckey LBKT>;
      };
      unfold: unfold {
        compatible = "zmk,behavior-tap-dance";
        label = "UNFOLD";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ht_ckck J LC(LS(RBKT))>, <&ck_ckey RBKT>;
      };

      td_home: home_actions {
        compatible = "zmk,behavior-tap-dance";
        label = "HOME_ACT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht3 LC(HOME) HOME>, <&kp LC(LA(UP))>;
      };
      td_end: end_actions {
        compatible = "zmk,behavior-tap-dance";
        label = "END_ACT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht3 LC(END) END>, <&kp LC(LA(DOWN))>;
      };

      td_defs: defs_actions {
        compatible = "zmk,behavior-tap-dance";
        label = "DEFS_ACTIONS";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht_ckk F12 F12>, <&kp LA(F12)>;
      };
    };

    keymap {
      compatible = "zmk,keymap";
      default_layer {
        label = "Base";
        bindings = <
                &kp GRAVE   &kp N7  &kp N5  &kp N3   &kp N1        &kp N9                &kp N0  &kp N2    &kp N4     &kp N6   &kp N8         &kp MINUS
          &none &kp TAB     &kp Q   &kp W   &kp E    &kp R         &kp T                 &kp Y   &kp U     &kp I      &kp O    &kp P          &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                &kp ESC     &kp A   &kp S   &kp D    &kp F         &kp G                 &kp H   &kp J     &kp K      &kp L    &kp SEMICOLON  &kp SINGLE_QUOTE
                &kp LSHIFT  &kp Z   &kp X   &kp C    &kp V         &kp B                 &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH       &kp RSHIFT
                             &lt WIN LGUI   RET_CTL  &lt LWR BSPC  &mt LCTRL DEL         ALTS    &lt RSE SPACE  W_CAPS  WORKSPACE
        >;
      };

      nav_layer {
        label = "Nav";
        bindings = <
                GO_BACK  &kp F7     &kp F5      &kp F3      &kp F1       &kp F9          &kp F10       &kp F2        &kp F4        &kp F6         &kp F8  GO_FWD
          &none &trans   PGUP_TAB   PGDN_TAB    &kp UP      INS_HOV      &kp F11         &td_defs      REFS          &kp LC(UP)    &kp LC(K)      F_BSPC  F_DEL     &none
                &trans   &td_home   &kp LEFT    &kp DOWN    &kp RIGHT    &td_end         &kp LA(UP)    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)  &sl CS  PREV_DIFF
                &trans   &kp LC(Z)  &kp LS(DEL) &kp LC(INS) &kp LS(INS)  &kp LS(LC(G))   &kp LA(DOWN)  &fold         COPY_LN       &unfold        &sl SA  NEXT_DIFF
                                    &none       &none       &trans       &trans          &trans        &mo ADJ       &transform    &kp PSCRN
        >;
      };

      sym_layer {
        label = "Sym";
        bindings = <
                &none   &trans     &trans    &trans     &trans    &trans           &trans     &trans    &trans     &trans    &trans    &none
          &none &trans  &kp GRAVE  &kp LT    &kp EQUAL  &kp GT    &kp EXCL         &kp CARET  &kp LBKT  &kp HASH   &kp RBKT  &none     &none   &none
                &trans  &kp UNDER  &kp LPAR  &kp MINUS  &kp RPAR  &kp BSLH         &kp PRCNT  &kp LBRC  &kp PLUS   &kp RBRC  &kp SEMI  &kp SQT
                &trans  &kp SPACE  &kp PIPE  &kp TILDE  &kp AMPS  &kp AT           &kp DLLR   &kp STAR  &kp COMMA  &kp DOT   &kp FSLH  &trans
                                   &none     &trans     &mo ADJ   &trans           &trans     &trans    &none      &none
        >;
      };

      adjust_layer {
        label = "Adjust";
        bindings = <
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4      &bt BT_CLR           &bt BT_CLR    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
          &none &kp LC(LBKT)  &kp LC(RBKT)  &kp LS(LA(LEFT)) &kp LS(UP)    &kp LS(LA(RIGHT)) &kp LS(LA(UP))       &kp C_MUTE    &none         &none         &none         &none         &none        &none
                &trans        &kp LS(HOME)  &kp LS(LEFT)     &kp LS(DOWN)  &kp LS(RIGHT)     &kp LS(END)          &kp C_VOL_UP  MOVE_ED_L     &kp LC(BSLH)  MOVE_ED_R     &none         &kp C_BRI_UP
                &none         &kp LC(U)     &kp LS(LC(LEFT)) &kp LS(LA(I)) &kp LS(LC(RIGHT)) &kp LS(LA(DOWN))     &kp C_VOL_DN  PREV_ED       &kp LA(BSLH)  NEXT_ED       &none         &kp C_BRI_DN
                                            &bootloader      &none         &trans            &none                &none         &trans        &none         &bootloader
        >;
      };

      cs_layer {
        bindings = <
                &kp LS(LC(GRAVE)) &kp LS(LC(F7))  &kp LS(LC(F5))  &kp LS(LC(F3))  &kp LS(LC(F1))  &kp LS(LC(F9))    &kp LS(LC(F10))  &kp LS(LC(F2))  &kp LS(LC(F4))     &kp LS(LC(F6))   &kp LS(LC(F8))    &kp LS(LC(MINUS))
          &none &kp LS(LC(TAB))   &kp LS(LC(Q))   &kp LS(LC(W))   &kp LS(LC(E))   &kp LS(LC(R))   &kp LS(LC(T))     &kp LS(LC(Y))    &kp LS(LC(U))   &kp LS(LC(I))      &kp LS(LC(O))    &kp LS(LC(P))     &kp LS(LC(LBKT))   &kp LS(LC(RBKT))
                &trans            &kp LS(LC(A))   &kp LS(LC(S))   &kp LS(LC(D))   &kp LS(LC(F))   &kp LS(LC(G))     &kp LS(LC(H))    &kp LS(LC(J))   &kp LS(LC(K))      &kp LS(LC(L))    &kp LS(LC(SEMI))  &kp LS(LC(SQT))
                &kp LS(LC(F11))   &kp LS(LC(Z))   &kp LS(LC(X))   &kp LS(LC(C))   &kp LS(LC(V))   &kp LS(LC(B))     &kp LS(LC(N))    &kp LS(LC(M))   &kp LS(LC(COMMA))  &kp LS(LC(DOT))  &kp LS(LC(FSLH))  &kp LS(LC(F12))
                                                  &none           &kp LS(LC(RET)) &none           &none             &none            &none           &none              &none
        >;
      };

      sa_layer {
        bindings = <
                &kp LS(LA(GRAVE)) &kp LS(LA(F7))  &kp LS(LA(F5))  &kp LS(LA(F3))  &kp LS(LA(F1))  &kp LS(LA(F9))    &kp LS(LA(F10))  &kp LS(LA(F2))  &kp LS(LA(F4))     &kp LS(LA(F6))   &kp LS(LA(F8))    &kp LS(LA(MINUS))
          &none &kp LS(LA(TAB))   &kp LS(LA(Q))   &kp LS(LA(W))   &kp LS(LA(E))   &kp LS(LA(R))   &kp LS(LA(T))     &kp LS(LA(Y))    &kp LS(LA(U))   &kp LS(LA(I))      &kp LS(LA(O))    &kp LS(LA(P))     &kp LS(LA(LBKT))   &kp LS(LA(RBKT))
                &trans            &kp LS(LA(A))   &kp LS(LA(S))   &kp LS(LA(D))   &kp LS(LA(F))   &kp LS(LA(G))     &kp LS(LA(H))    &kp LS(LA(J))   &kp LS(LA(K))      &kp LS(LA(L))    &kp LS(LA(SEMI))  &kp LS(LA(SQT))
                &kp LS(LA(F11))   &kp LS(LA(Z))   &kp LS(LA(X))   &kp LS(LA(C))   &kp LS(LA(V))   &kp LS(LA(B))     &kp LS(LA(N))    &kp LS(LA(M))   &kp LS(LA(COMMA))  &kp LS(LA(DOT))  &kp LS(LA(FSLH))  &kp LS(LA(F12))
                                                  &none           &kp LS(LA(RET)) &none           &none             &none            &none           &none              &none
        >;
      };

      win_layer {
        label = "Windows";
        bindings = <
                &none  &none  &none   &none  &none  &none       &none  &none  &none  &none  &none       &none
          &none &none  &none  &none   &none  &none  &none       WS_1   N_W    MV_U   N_E    &kp LA(F1)  &none      &none
                &none  &none  &none   &none  &none  &none       WEST   MV_L   MV_D   MV_R   EAST        &kp LA(F10)
                &none  &none  &none   &none  &none  &none       WS_2   S_W    HIDE   S_E    &kp LA(F2)  &none
                              &trans  &none  &none  &none       &none  &none  &none  &none
        >;
      };
    };
};
