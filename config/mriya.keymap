/*
 * Copyright (c) 2023 serg3295
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF  0
#define NAV  1
#define SYM  2
#define ADJ  3
#define WIN  4
#define COMP 5

// Compose combinations
#define POUND_L  &cmps MINUS L
#define EURO     &cmps EQUAL C
#define DIVISION &cmps MINUS COLON
#define SQR_ROOT &cmps V SLASH
#define UPPER_0  &cmps CARET N0
#define UPPER_1  &cmps CARET N1
#define UPPER_2  &cmps CARET N2
#define UPPER_3  &cmps CARET N3
#define NBSP     &cmps SPACE SPACE
#define ELLIPSES &cmps DOT DOT

// Tiling window manager
#define WS_1 &kp LG(PG_UP)
#define WS_2 &kp LG(PG_DN)
#define N_W  &kp LG(LC(UP))
#define N_E  &kp LG(LC(LA(UP)))
#define S_W  &kp LG(LC(DOWN))
#define S_E  &kp LG(LC(LA(DOWN)))
#define WEST &kp LG(LC(LEFT))
#define EAST &kp LG(LC(RIGHT))
#define HIDE &kp LG(D)
#define MV_L &kp LG(LEFT)
#define MV_R &kp LG(RIGHT)
#define MV_U &kp LG(UP)
#define MV_D &kp LG(DOWN)

#define LANG_CS &ht_sk_kp LC(LSHIFT) RALT
#define WSPC_SA &ht_sk_kp LS(LALT) LG(SPACE)
#define NEXT_ED &open_ed PG_DN LC(PG_DN)
#define PREV_ED &open_ed PG_UP LC(PG_UP)
#define W_CAPS  &ht_caps CAPS 0
#define SHEBANG &bigram HASH EXCLAMATION
#define NEQ_EXCL  &ht_not_eq EXCLAMATION EQUAL
#define NEQ_TILDE &ht_not_eq TILDE TILDE

#define NEXT_DIFF &ht3 LA(F3) LC(LA(RBKT))
#define PREV_DIFF &ht3 LS(LA(F3)) LC(LA(LBKT))
#define MOVE_ED_L &ht3 LC(LA(LEFT)) LC(LS(PG_UP))
#define MOVE_ED_R &ht3 LC(LA(RIGHT)) LC(LS(PG_DN))
#define PGUP_TAB  &ht3 LC(LS(TAB)) PG_UP
#define PGDN_TAB  &ht3 LC(TAB) PG_DN
#define COPY_LN   &ht3 LC(LA(FSLH)) LC(LA(LS(DOWN)))
#define F_BSPC    &ht3 LC(LS(BSPC)) LC(BSPC)
#define F_DEL     &ht3 LC(LS(DEL)) LC(DEL)
#define REFS      &ht3 LS(LA(F12)) LS(F12)
#define RET_CTL   &ht3 LC(RET) RET
#define GO_BACK   &ht3 LA(LEFT) LC(LA(MINUS))
#define GO_FWD    &ht3 LA(RIGHT) LC(LS(MINUS))

#include "macros.dtsi"

&lt {
  tapping_term_ms = <250>;
  quick_tap_ms = <250>;
};

&mt {
  tapping_term_ms = <250>;
  quick_tap_ms = <250>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <ADJ>;
        };
    };

    behaviors {
    // hold-tap
      ht3: ht_300ms {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_300MS";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&kp>, <&kp>;
      };

      ht_caps: mod_caps {
        compatible = "zmk,behavior-hold-tap";
        label = "MOD_CAPS";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&kp>, <&caps_word>;
      };

      ht_not_eq: ht_not_equal {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_NOT_EQUAL";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&not_eq>, <&kp>;
      };

      ht_ckck: ht_ctrl_k_ctrl_keycode {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_CTRL_K_CTRL_KEYCODE";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&ck_ckey>, <&kp>;
      };

      ht_ckk: ht_ctrl_k_keycode {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_CTRL_K_KEYCODE";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&ck_key>, <&kp>;
      };

      open_ed: ht_open_next_prev_editor {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_OPEN_NEXT_PREV_EDITOR";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&ck_ckey>, <&kp>;
      };

      ht_sk_kp: ht_sk_kp {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_SK_KP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&sk>, <&kp>;
      };

    // tap-dance
      fold: fold {
        compatible = "zmk,behavior-tap-dance";
        label = "FOLD";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ht_ckck N0 LC(LS(LBKT))>, <&ck_ckey LBKT>;
      };
      unfold: unfold {
        compatible = "zmk,behavior-tap-dance";
        label = "UNFOLD";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ht_ckck J LC(LS(RBKT))>, <&ck_ckey RBKT>;
      };

      td_home: home_actions {
        compatible = "zmk,behavior-tap-dance";
        label = "HOME_ACT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht3 LC(HOME) HOME>, <&kp LC(LA(UP))>;
      };
      td_end: end_actions {
        compatible = "zmk,behavior-tap-dance";
        label = "END_ACT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht3 LC(END) END>, <&kp LC(LA(DOWN))>;
      };

      td_defs: defs_actions {
        compatible = "zmk,behavior-tap-dance";
        label = "DEFS_ACTIONS";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht_ckk F12 F12>, <&kp LA(F12)>;
      };
    };

    keymap {
      compatible = "zmk,keymap";
      default_layer {
        label = "Base";
        bindings = <
                  &kp GRAVE   &kp N7  &kp N5         &kp N3       &kp N1        &kp N9          &kp N0        &kp N2         &kp N4     &kp N6   &kp N8         &kp MINUS
          W_CAPS  &kp TAB     &kp Q   &kp W          &kp E        &kp R         &kp T           &kp Y         &kp U          &kp I      &kp O    &kp P          &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                  &kp ESC     &kp A   &kp S          &kp D        &kp F         &kp G           &kp H         &kp J          &kp K      &kp L    &kp SEMICOLON  &kp SINGLE_QUOTE
                  &kp LSHIFT  &kp Z   &kp X          &kp C        &kp V         &kp B           &kp N         &kp M          &kp COMMA  &kp DOT  &kp FSLH       &kp RSHIFT
                                      &lt COMP LGUI  &lt WIN RET  &lt NAV BSPC  &sk LCTRL       &mt LALT DEL  &lt SYM SPACE  LANG_CS    WSPC_SA
        >;
      };

      nav_layer {
        label = "Nav";
        bindings = <
                      GO_BACK  &kp F7     &kp F5      &kp F3      &kp F1       &kp F9         &ht_ckk F10 F10  &kp F2        &kp F4        &kp F6         &kp F8      GO_FWD
          &transform  &trans   PGUP_TAB   PGDN_TAB    &kp UP      &kp INS      &kp F11        &td_defs         REFS          &kp LC(UP)    &kp LC(K)      PREV_DIFF   NEXT_DIFF  &kp LS(LC(G))
                      &trans   &td_home   &kp LEFT    &kp DOWN    &kp RIGHT    &td_end        &mv_line UP      &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)  F_BSPC      F_DEL
                      &trans   &kp LC(Z)  &kp LS(DEL) &kp LC(INS) &kp LS(INS)  &kp DEL        &mv_line DOWN    &fold         COPY_LN       &unfold        &ck_ckey I  &trans
                                          &none       &none       &trans       &trans         &trans           &trans        &trans        &trans
        >;
      };

      sym_layer {
        label = "Sym";
        bindings = <
                    &ru GRAVE   &ru N7     &none     &ru N3     &none     &none            &none      &ru N2    &ru N4     &ru N6    &ru2 SLASH  &ru2 PIPE
          &kp RGUI  &ru2 GRAVE  &kp GRAVE  &kp LT    NEQ_EXCL   &kp GT    &kp EXCL         &kp PRCNT  &kp LBKT  &kp HASH   &kp RBKT  &none       SHEBANG  &kp PSCRN
                    &trans      &kp UNDER  &kp LPAR  &kp MINUS  &kp RPAR  &kp BSLH         &kp CARET  &kp LBRC  &kp PLUS   &kp RBRC  &kp SEMI    &kp SQT
                    &trans      &kp SPACE  &kp PIPE  NEQ_TILDE  &kp AMPS  &kp AT           &kp DLLR   &kp STAR  &kp COMMA  &kp DOT   &kp FSLH    &trans
                                           &none     &trans     &trans    &trans           &trans     &trans    &none      &none
        >;
      };

      adjust_layer {
        label = "Adjust";
        bindings = <
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4      &bt BT_CLR           &bt BT_CLR        &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1   &bt BT_SEL 0
          &none &kp LC(LBKT)  &kp LC(RBKT)  &kp LS(LA(LEFT)) &kp LS(UP)    &kp LS(LA(RIGHT)) &kp LS(LC(UP))       &none             &none         &none         &none         &kp C_MUTE     &none          &none
                &trans        &kp LS(HOME)  &kp LS(LEFT)     &kp LS(DOWN)  &kp LS(RIGHT)     &kp LS(END)          &kp LS(LA(UP))    MOVE_ED_L     &kp LC(BSLH)  MOVE_ED_R     &kp C_VOL_UP   &kp C_BRI_UP
                &none         &kp LC(U)     &kp LS(LC(LEFT)) &kp LS(LA(I)) &kp LS(LC(RIGHT)) &kp LS(LC(DOWN))     &kp LS(LA(DOWN))  PREV_ED       &kp LA(BSLH)  NEXT_ED       &kp C_VOL_DN   &kp C_BRI_DN
                                            &bootloader      &none         &trans            &none                &none             &trans        &none         &bootloader
        >;
      };

      win_layer {
        label = "WinMgr";
        bindings = <
                &none  &none  &none   &none       &none       &none       &none  &none  &none  &none  &none       &none
          &none &none  &none  &none   &none       &none       &none       WS_1   N_W    MV_U   N_E    &kp LA(F8)  &none      &none
                &none  &none  &none   &kp LA(F2)  &kp LA(F1)  &none       WEST   MV_L   MV_D   MV_R   EAST        &kp LA(F10)
                &none  &none  &none   &none       &none       &none       WS_2   S_W    HIDE   S_E    &kp LA(F9)  &kp LA(F5)
                              &none   &trans      &none       &none       &none  &none  &kp LA(F4)    &none
        >;
      };

      comp_layer {
        label = "Compose";
        bindings = <
                &none  &none  &cmps N1 N2  &cmps N1 N3  &cmps N1 N4  &cmps N3 N4       UPPER_0  UPPER_1    UPPER_2   UPPER_3    &cmps2 MINUS  &cmps2 DOT
          &none &none  &none  &none        EURO         &cmps O R    &cmps T M         &none    &none      &none     &cmps O O  &none         &none       &cmps PLUS MINUS
                &none  &none  &none        &none        &none        &none             &none    &none      &none     POUND_L    &cmps LT LT   &cmps GT GT
                &none  &none  &cmps X X    &cmps O C    SQR_ROOT     &none             &none    &cmps M U  &none     ELLIPSES   DIVISION      &none
                              &trans       &none        &none        &none             &none    NBSP       &none     &none
        >;
      };
    };
};
