/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define CTL 4
#define CS  5
#define SA  6
#define CA  7
#define COPY_LN LC(LA(FSLH)) LC(LA(LS(DOWN)))
#define NEXT_ED LC(PG_UP) &next_ed
#define PREV_ED LC(PG_DN) &prev_ed
#define MOVE_L  LC(LS(PG_UP)) LC(LA(LEFT))
#define MOVE_R  LC(LS(PG_DN)) LC(LA(RIGHT))

&lt {
  quick_tap_ms = <200>;
};

&mt {
  quick_tap_ms = <200>;
};

&caps_word {
  mods = <(LSHIFT|RSHIFT)>;
};

/ {
    macros {
      next_ed: next_ed {
        label = "OPEN_NEXT_EDITOR";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp K &kp PG_DN>
          , <&macro_release &kp LCTRL>
          ;
      };
      prev_ed: prev_ed {
        label = "OPEN_PREVIOUS_EDITOR";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp K &kp PG_UP>
          , <&macro_release &kp LCTRL>
          ;
      };
      show_hover: show_hover {
        label = "SHOW_HOVER";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp K &kp I>
          , <&macro_release &kp LCTRL>
          ;
      };
    };

    behaviors {
      td0: tap_dance_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "HOME";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp HOME>, <&kp LC(HOME)>;
      };
      td1: tap_dance_1 {
        compatible = "zmk,behavior-tap-dance";
        label = "END";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp END>, <&kp LC(END)>;
       };
    };

    keymap {
      compatible = "zmk,keymap";
      default_layer {
        bindings = <
                    &kp GRAVE   &kp N7  &kp N5   &kp N3    &kp N1   &kp N9          &kp N0  &kp N2   &kp N4     &kp N6   &kp N8    &kp MINUS
          &sk LGUI  &kp TAB     &kp Q   &kp W    &kp E     &kp R    &kp T            &kp Y  &kp U    &kp I      &kp O    &kp P     &kp LBKT   &kp RBKT
                    &kp ESCAPE  &kp A   &kp S    &kp D     &kp F    &kp G            &kp H  &kp J    &kp K      &kp L    &kp SEMI  &kp SQT
                    &kp LSHIFT  &kp Z   &kp X    &kp C     &kp V    &kp B            &kp N  &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                                        &kp RET  &kp BSPC  &mo LWR  &sk LCTRL     &sk LALT  &mo RSE  &kp SPACE  &kp RALT
        >;
      };

      lower_layer {
        bindings = <
                  &kp LA(LEFT)  &kp F7     &kp F5       &kp F3      &kp F1      &kp F9         &kp F10       &kp F2        &kp F4        &kp F6         &kp F8        &kp LA(RIGHT)
          &trans  &trans        &kp PG_UP  &kp PG_DN    &kp UP      &kp INS     &kp F11        &kp F12       &kp LC(K)     &kp LC(UP)    &show_hover    &kp LC(BSPC)  &kp LC(DEL)         &sl CA
                  &trans        &td0       &kp LEFT     &kp DOWN    &kp RIGHT   &td1           &kp LA(UP)    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)  &sl CTL       &mt CS LC(LSHFT)
                  &trans        &kp LC(Z)  &kp LS(DEL)  &kp LC(INS) &kp LS(INS) &kp DEL        &kp LA(DOWN)  &sl SA        &mt COPY_LN   &key_repeat    &kp LC(F)     &trans
                                           &trans       &trans      &trans      &trans         &trans        &mo ADJ       &trans        &trans
        >;
      };

      raise_layer {
        bindings = <
                    &kp LC(LA(LBKT))  &trans     &trans    &trans     &trans    &trans           &trans     &trans    &trans     &trans    &trans            &kp LC(LA(RBKT))
          &kp PSCRN &trans            &kp GRAVE  &kp LT    &kp EQUAL  &kp GT    &kp EXCL         &kp CARET  &kp LBKT  &kp HASH   &kp RBKT  &kp LS(LC(BSPC))  &kp LS(LC(DEL))  &none
                    &trans            &kp UNDER  &kp LPAR  &kp MINUS  &kp RPAR  &kp BSLH         &kp PRCNT  &kp LBRC  &kp PLUS   &kp RBRC  &kp SEMI          &kp SQT
                    &trans            &kp SPACE  &kp PIPE  &kp TILDE  &kp AMPS  &kp AT           &kp DLLR   &kp STAR  &kp COMMA  &kp DOT   &kp FSLH          &trans
                                                 &trans    &trans     &mo ADJ   &trans           &trans     &trans    &trans     &trans
        >;
      };

      adjust_layer {
        bindings = <
                    &bootloader &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3      &bt BT_CLR          &bt BT_CLR   &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0   &bootloader
          &kp CAPS  &sys_reset  &none         &kp LS(LA(LEFT)) &kp LS(LA(UP))   &kp LS(LA(RIGHT)) &kp C_BRI_UP        &none        &none         &none         &none         &none          &sys_reset  &sk RGUI
                    &trans      &LS(HOME)     &kp LS(LEFT)     &kp LS(LA(DOWN)) &kp LS(RIGHT)     &kp LS(END)         &kp LC(BSLH) &mt MOVE_L    &none         &mt MOVE_R    &kp LS(LA(F3)) &none
                    &none       &kp LC(U)     &kp LS(LC(LEFT)) &LS(LA(I))       &kp LS(LC(RIGHT)) &kp C_BRI_DN        &kp LA(BSLH) &mt PREV_ED   &none         &mt NEXT_ED   &kp LA(F3)     &none
                                              &trans           &trans           &trans            &trans              &trans       &trans        &trans        &trans
        >;
      };

      ctrl_layer {
        bindings = <
                &kp LC(GRAVE) &kp LC(N7)  &kp LC(N5)  &kp LC(N3)  &kp LC(N1)  &kp LC(N9)    &kp LC(N0)  &kp LC(N2)  &kp LC(N4)     &kp LC(N6)   &kp LC(N8)    &kp LC(MINUS)
          &none &kp LC(TAB)   &kp LC(Q)   &kp LC(W)   &kp LC(E)   &kp LC(R)   &kp LC(T)     &kp LC(Y)   &kp LC(U)   &kp LC(I)      &kp LC(O)    &kp LC(P)     &kp LC(LBKT)   &kp LC(RBKT)
                &trans        &kp LC(A)   &kp LC(S)   &kp LC(D)   &kp LC(F)   &kp LC(G)     &kp LC(H)   &kp LC(J)   &kp LC(K)      &kp LC(L)    &kp LC(SEMI)  &kp LC(SQT)
                &none         &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp LC(B)     &kp LC(N)   &kp LC(M)   &kp LC(COMMA)  &kp LC(DOT)  &kp LC(FSLH)  &none
                                          &kp LC(RET) &kp LC(BSPC)  &none     &none         &none       &none       &kp LC(SPACE)  &none
        >;
      };

      cs_layer {
        bindings = <
                &kp LS(LC(GRAVE)) &kp LS(LC(N7))  &kp LS(LC(N5))  &kp LS(LC(N3))  &kp LS(LC(N1))  &kp LS(LC(N9))    &kp LS(LC(N0))  &kp LS(LC(N2))  &kp LS(LC(N4))     &kp LS(LC(N6))   &kp LS(LC(N8))    &kp LS(LC(MINUS))
          &none &kp LS(LC(TAB))   &kp LS(LC(Q))   &kp LS(LC(W))   &kp LS(LC(E))   &kp LS(LC(R))   &kp LS(LC(T))     &kp LS(LC(Y))   &kp LS(LC(U))   &kp LS(LC(I))      &kp LS(LC(O))    &kp LS(LC(P))     &kp LS(LC(LBKT))   &kp LS(LC(RBKT))
                &trans            &kp LS(LC(A))   &kp LS(LC(S))   &kp LS(LC(D))   &kp LS(LC(F))   &kp LS(LC(G))     &kp LS(LC(H))   &kp LS(LC(J))   &kp LS(LC(K))      &kp LS(LC(L))    &kp LS(LC(SEMI))  &kp LS(LC(SQT))
                &none             &kp LS(LC(Z))   &kp LS(LC(X))   &kp LS(LC(C))   &kp LS(LC(V))   &kp LS(LC(B))     &kp LS(LC(N))   &kp LS(LC(M))   &kp LS(LC(COMMA))  &kp LS(LC(DOT))  &kp LS(LC(FSLH))  &none
                                                  &kp LS(LC(RET)) &kp LS(LC(BSPC))  &none         &none             &none           &none           &kp LS(LC(SPACE))  &none
        >;
      };

      sa_layer {
        bindings = <
                &kp LA(LS(GRAVE)) &kp LA(LS(N7))  &kp LA(LS(N5))  &kp LA(LS(N3))  &kp LA(LS(N1))  &kp LA(LS(N9))    &kp LA(LS(N0))  &kp LA(LS(N2))  &kp LA(LS(N4))     &kp LA(LS(N6))   &kp LA(LS(N8))    &kp LA(LS(MINUS))
          &none &kp LA(LS(TAB))   &kp LA(LS(Q))   &kp LA(LS(W))   &kp LA(LS(E))   &kp LA(LS(R))   &kp LA(LS(T))     &kp LA(LS(Y))   &kp LA(LS(U))   &kp LA(LS(I))      &kp LA(LS(O))    &kp LA(LS(P))     &kp LA(LS(LBKT))   &kp LA(LS(RBKT))
                &trans            &kp LA(LS(A))   &kp LA(LS(S))   &kp LA(LS(D))   &kp LA(LS(F))   &kp LA(LS(G))     &kp LA(LS(H))   &kp LA(LS(J))   &kp LA(LS(K))      &kp LA(LS(L))    &kp LA(LS(SEMI))  &kp LA(LS(SQT))
                &none             &kp LA(LS(Z))   &kp LA(LS(X))   &kp LA(LS(C))   &kp LA(LS(V))   &kp LA(LS(B))     &kp LA(LS(N))   &kp LA(LS(M))   &kp LA(LS(COMMA))  &kp LA(LS(DOT))  &kp LA(LS(FSLH))  &none
                                                  &kp LA(LS(RET)) &kp LA(LS(BSPC))  &none         &none             &none           &none           &kp LA(LS(SPACE))  &none
        >;
      };

      ca_layer {
        bindings = <
                &kp LC(LA(GRAVE)) &kp LC(LA(N7))  &kp LC(LA(N5))  &kp LC(LA(N3))  &kp LC(LA(N1))  &kp LC(LA(N9))    &kp LC(LA(N0))  &kp LC(LA(N2))  &kp LC(LA(N4))     &kp LC(LA(N6))   &kp LC(LA(N8))    &kp LC(LA(MINUS))
          &none &kp LC(LA(TAB))   &kp LC(LA(Q))   &kp LC(LA(W))   &kp LC(LA(E))   &kp LC(LA(R))   &kp LC(LA(T))     &kp LC(LA(Y))   &kp LC(LA(U))   &kp LC(LA(I))      &kp LC(LA(O))    &kp LC(LA(P))     &kp LC(LA(LBKT))   &kp LC(LA(RBKT))
                &trans            &kp LC(LA(A))   &kp LC(LA(S))   &kp LC(LA(D))   &kp LC(LA(F))   &kp LC(LA(G))     &kp LC(LA(H))   &kp LC(LA(J))   &kp LC(LA(K))      &kp LC(LA(L))    &kp LC(LA(SEMI))  &kp LC(LA(SQT))
                &none             &kp LC(LA(Z))   &kp LC(LA(X))   &kp LC(LA(C))   &kp LC(LA(V))   &kp LC(LA(B))     &kp LC(LA(N))   &kp LC(LA(M))   &kp LC(LA(COMMA))  &kp LC(LA(DOT))  &kp LC(LA(FSLH))  &none
                                                  &kp LC(LA(RET)) &kp LC(LA(BSPC))  &none         &none             &none           &none           &kp LC(LA(SPACE))  &none
        >;
      };
    };
};
