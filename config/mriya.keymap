/*
 * Copyright (c) 2023 serg3295
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF  0
#define NAV  1
#define SYM  2
#define ADJ  3
#define WIN  4
#define COMP 5

#include "actions.h"
#include "macros.dtsi"

&lt {
  tapping_term_ms = <250>;
  quick_tap_ms = <250>;
};

&mt {
  tapping_term_ms = <250>;
  quick_tap_ms = <250>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <ADJ>;
        };
    };

    behaviors {
    // hold-tap
      ht3: ht_300ms {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&kp>, <&kp>;
      };

      ht_caps: mod_caps {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&kp>, <&caps_word>;
      };

      ht_not_eq: ht_not_equal {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&not_eq>, <&kp>;
      };

      ht_ru: ht_ru {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&ru>, <&kp>;
      };

      ht_ru2: ht_ru2 {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&ru2>, <&kp>;
      };

      ht_ckk: ht_ctrl_k_keycode {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&ck_key>, <&kp>;
      };

      ht_ck_ck: ht_ctrl_k_ctrl_k {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&ck_key>, <&ck_key>;
      };

      ht_sk_kp: ht_sk_kp {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        bindings = <&sk>, <&kp>;
      };

    // tap-dance
      fold: fold {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ht_ckk LC(N0) LC(LS(LBKT))>, <&ck_key LC(LBKT)>;
      };
      unfold: unfold {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ht_ckk LC(J) LC(LS(RBKT))>, <&ck_key LC(RBKT)>;
      };

      td_home: home_actions {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht3 LC(HOME) HOME>, <&kp LC(LA(UP))>;
      };
      td_end: end_actions {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht3 LC(END) END>, <&kp LC(LA(DOWN))>;
      };

      td_defs: defs_actions {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&ht_ckk F12 F12>, <&kp LA(F12)>;
      };
    };

    keymap {
      compatible = "zmk,keymap";
      default_layer {
        display-name = "Base";
        bindings = <
                  &kp GRAVE   &kp N7  &kp N5         &kp N3       &kp N1        &kp N9          &kp N0        &kp N2         &kp N4     &kp N6   &kp N8         &kp MINUS
          W_CAPS  &kp TAB     &kp Q   &kp W          &kp E        &kp R         &kp T           &kp Y         &kp U          &kp I      &kp O    &kp P          &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                  &kp ESC     &kp A   &kp S          &kp D        &kp F         &kp G           &kp H         &kp J          &kp K      &kp L    &kp SEMICOLON  &kp SINGLE_QUOTE
                  &kp LSHIFT  &kp Z   &kp X          &kp C        &kp V         &kp B           &kp N         &kp M          &kp COMMA  &kp DOT  &kp FSLH       &kp RSHIFT
                                      &lt COMP LGUI  &lt WIN RET  &lt NAV BSPC  &sk LCTRL       &mt LALT DEL  &lt SYM SPACE  LANG_CS    WSPC_SA
        >;
      };

      nav_layer {
        display-name = "Nav";
        bindings = <
                GO_BACK    &kp F7           &kp F5       &kp F3      &kp F1       &kp F9         &ht_ckk F10 F10  &kp F2  &kp F4   &kp F6   &kp F8        GO_FWD
          &none &kp PG_UP  &kp LS(LC(TAB))  &kp LC(TAB)  &kp UP      &kp INS      &kp F11        &td_defs         REFS    JUMP_UP  HOVER    PREV_DIFF     NEXT_DIFF  &kp LS(F10)
                &kp PG_DN  &td_home         &kp LEFT     &kp DOWN    &kp RIGHT    &td_end        &mv_line UP      JUMP_L  JUMP_DN  JUMP_R   F_BSPC        F_DEL
                &trans     &kp LC(Z)        &kp LS(DEL)  &kp LC(INS) &kp LS(INS)  &kp DEL        &mv_line DOWN    &fold   COPY_LN  &unfold  &kp LS(LA(G)) &trans
                                            &kp SPACE    &none       &trans       &trans         &trans           &trans  &trans   &trans
        >;
      };

      sym_layer {
        display-name = "Sym";
        bindings = <
                    &ru GRAVE   &trans     &trans    &trans     &trans    &trans           &trans     &trans    &trans     &trans       &trans     &none
          &kp RGUI  &ru2 GRAVE  &kp GRAVE  LT_RU     NEQ_EXCL   GT_RU     &kp EXCL         &kp PRCNT  LBKT_RU   HASH_RU    RBKT_RU      &ru N3     SHEBANG  &none
                    &none       &kp UNDER  &kp LPAR  &kp MINUS  &kp RPAR  &kp BSLH         CARET_RU   LBRC_RU   &kp PLUS   RBRC_RU      DBL_COLON  &kp SQT
                    &trans      &kp SPACE  PIPE_RU   NEQ_TILDE  AMPS_RU   AT_RU            DLLR_RU    &kp STAR  &kp COMMA  &key_repeat  FSLH_RU    &trans
                                           &none     &trans     &trans    &trans           &trans     &trans    &none      &none
        >;
      };

      adjust_layer {
        display-name = "Adjust";
        bindings = <
                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4      &bt BT_CLR           &bt BT_CLR        &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1   &bt BT_SEL 0
          &transform  &kp LC(LBKT)  &kp LC(RBKT)  &kp LS(LA(LEFT)) ACTION_UP     &kp LS(LA(RIGHT)) &kp LS(LC(UP))       &none             &none         &none         &none         &kp C_MUTE     &none         MV_AUX_WIN
                      &ck_ckey B    &kp LS(HOME)  ACTION_LEFT      ACTION_DOWN   ACTION_RIGHT      &kp LS(END)          &kp LS(LA(UP))    MOVE_ED_L     &kp LC(BSLH)  MOVE_ED_R     &kp C_VOL_UP   &kp C_BRI_UP
                      &ck_ckey K    &kp LC(U)     &kp LS(LC(LEFT)) &kp LS(LA(I)) &kp LS(LC(RIGHT)) &kp LS(LC(DOWN))     &kp LS(LA(DOWN))  PREV_ED       &kp LA(BSLH)  NEXT_ED       &kp C_VOL_DN   &kp C_BRI_DN
                                                  &bootloader      &none         &trans            &none                &none             &trans        &none         &bootloader
        >;
      };

      win_layer {
        display-name = "WinMgr";
        bindings = <
                    &none  &none      &none   &none       &none      &none           &none  &none  &none  &none  &none       &none
          &kp PSCRN &none  &kp LG(Q)  &none   &none       &kp LA(F2) &kp LG(T)       WS_1   N_W    MV_U   N_E    &kp LA(F8)  &kp LA(F7)  &none
                    &none  &kp LG(A)  &none   &kp LG(N9)  &kp LG(F)  &kp LA(F1)      WEST   MV_L   MV_D   MV_R   EAST        &kp LA(F10)
                    &none  &none      &none   &kp LG(C)   &kp LG(V)  &none           WS_2   S_W    HIDE   S_E    &kp LA(F9)  &kp LA(F5)
                                      &none   &trans      &none      &none           &none  &none  &kp LA(F4)    &none
        >;
      };

      comp_layer {
        display-name = "Compose";
        bindings = <
                &none  &none  &cmps N1 N2  &cmps N1 N3  &cmps N1 N4  &cmps N3 N4       UPPER_0  UPPER_1    UPPER_2   UPPER_3    &cmps2 MINUS  &cmps2 DOT
          &none &none  &none  &none        EURO         &cmps O R    &cmps T M         &none    &none      &none     &cmps O O  &none         &none       &cmps PLUS MINUS
                &none  &none  &none        &none        &none        &none             &none    &none      &none     POUND_L    &cmps LT LT   &cmps GT GT
                &none  &none  &cmps X X    &cmps O C    SQR_ROOT     &none             &none    &cmps M U  &none     ELLIPSES   DIVISION      &none
                              &trans       &none        &none        &none             &none    NBSP       &none     &none
        >;
      };
    };
};
